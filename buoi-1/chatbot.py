import re
import unicodedata
from difflib import SequenceMatcher
from typing import Dict, List, Optional

class NLPRuleBot:
    def __init__(self, rules: List[Dict], fallbacks: List[str], similarity_threshold: float = 0.88):
        """
        Kh·ªüi t·∫°o chatbot v·ªõi c√°c lu·∫≠t v√† c√¢u tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
        Args:
            rules: Danh s√°ch c√°c lu·∫≠t (keywords v√† answer)
            fallbacks: Danh s√°ch c√¢u tr·∫£ l·ªùi khi kh√¥ng t√¨m th·∫•y lu·∫≠t ph√π h·ª£p
            similarity_threshold: Ng∆∞·ª°ng ƒë·ªô t∆∞∆°ng ƒë·ªìng cho kh·ªõp m·ªù
        """
        self.rules = rules
        self.fallbacks = fallbacks
        self.similarity_threshold = similarity_threshold
        # Chu·∫©n h√≥a keywords tr∆∞·ªõc ƒë·ªÉ t·ªëi ∆∞u performance
        self.normalized_rules = self._preprocess_rules()

    @staticmethod
    def normalize_text(text: str) -> str:
        """Chu·∫©n h√≥a vƒÉn b·∫£n: lowercase, b·ªè d·∫•u, chu·∫©n h√≥a kho·∫£ng tr·∫Øng."""
        # Chuy·ªÉn th√†nh lowercase v√† x√≥a kho·∫£ng tr·∫Øng th·ª´a
        text = text.lower().strip()
        # B·ªè d·∫•u ti·∫øng Vi·ªát
        text = ''.join(
            c for c in unicodedata.normalize('NFD', text)
            if unicodedata.category(c) != 'Mn'
        )
        # Thay nhi·ªÅu kho·∫£ng tr·∫Øng b·∫±ng m·ªôt kho·∫£ng tr·∫Øng
        return re.sub(r'\s+', ' ', text)

    def _preprocess_rules(self) -> List[Dict]:
        """Ti·ªÅn x·ª≠ l√Ω v√† chu·∫©n h√≥a keywords c·ªßa c√°c lu·∫≠t."""
        normalized = []
        for rule in self.rules:
            # Chu·∫©n h√≥a t·∫•t c·∫£ keywords trong lu·∫≠t
            norm_keywords = [self.normalize_text(kw) for kw in rule["keywords"]]
            normalized.append({
                "keywords": norm_keywords,
                "answer": rule["answer"]
            })
        return normalized

    def _find_best_match(self, input_text: str) -> Optional[str]:
        """
        T√¨m lu·∫≠t ph√π h·ª£p nh·∫•t v·ªõi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
        Returns:
            C√¢u tr·∫£ l·ªùi cho lu·∫≠t ph√π h·ª£p nh·∫•t ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        best_ratio = 0
        best_answer = None
        
        norm_input = self.normalize_text(input_text)
        
        for rule in self.normalized_rules:
            for keyword in rule["keywords"]:
                # ∆Øu ti√™n kh·ªõp ch√≠nh x√°c
                if keyword in norm_input:
                    return rule["answer"]
                
                # N·∫øu kh√¥ng kh·ªõp ch√≠nh x√°c, t√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng
                ratio = SequenceMatcher(None, norm_input, keyword).ratio()
                if ratio > best_ratio and ratio >= self.similarity_threshold:
                    best_ratio = ratio
                    best_answer = rule["answer"]
        
        return best_answer

    def reply(self, user_input: str) -> str:
        """
        X·ª≠ l√Ω c√¢u h·ªèi v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi ph√π h·ª£p.
        Args:
            user_input: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        Returns:
            C√¢u tr·∫£ l·ªùi t·ª´ lu·∫≠t ph√π h·ª£p ho·∫∑c fallback
        """
        if not user_input.strip():
            return "B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi!"
            
        answer = self._find_best_match(user_input)
        if answer:
            return answer
            
        # Tr·∫£ v·ªÅ ng·∫´u nhi√™n m·ªôt c√¢u fallback
        import random
        return random.choice(self.fallbacks)

def main():
    from rules import RULES, FALLBACKS  # Import t·ª´ file ri√™ng
    
    # Kh·ªüi t·∫°o chatbot
    bot = NLPRuleBot(RULES, FALLBACKS)
    
    print("ü§ñ NLP RuleBot - G√µ 'exit' ƒë·ªÉ tho√°t")
    
    while True:
        try:
            user_input = input("B·∫°n: ").strip()
            if not user_input:
                continue
                
            if user_input.lower() in {"exit", "quit"}:
                print("T·∫°m bi·ªát!")
                break
                
            print("Bot:", bot.reply(user_input))
            
        except (EOFError, KeyboardInterrupt):
            print("\nT·∫°m bi·ªát!")
            break

if __name__ == "__main__":
    main()